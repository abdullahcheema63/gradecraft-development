- if presenter.assignment.media.present?
  %img{:src => presenter.assignment.media }

%h2 Description
- if !current_student || presenter.assignment.points_visible_for_student?(current_student)
  - if presenter.assignment.pass_fail?
    %p.assignment-description= "#{term_for :pass}/#{term_for :fail} Assignment"
  - else
    %p.assignment-description= "#{points presenter.assignment.full_points} points possible"

  - if presenter.assignment.threshold_points?
    %p.assignment-description= "#{points presenter.assignment.threshold_points} points threshold"

- if current_user_is_student? && !impersonating? && presenter.positive_prediction_for?(presenter.assignment, current_student)
  %p.assignment-description
    My Goal:
    = render partial: "grades/components/prediction", locals: { grade: presenter.prediction(presenter.assignment, current_student)  }

%p.assignment-description= "Opens: #{l presenter.assignment.open_at.in_time_zone(current_user.time_zone)}" if presenter.assignment.open_at?
%p.assignment-description= "Due: #{l presenter.assignment.due_at.in_time_zone(current_user.time_zone)}" if presenter.assignment.due_at?

- if presenter.course.institution.try(:has_google_access)
  = link_to decorative_glyph(:calendar) + "Add to Google Calendar", add_assignment_google_calendars_assignments_path(presenter.assignment), :target => "_parent", method: :post, class: "function"

- if presenter.assignment_accepting_submissions?(current_student) && !presenter.has_viewable_submission?(current_student, current_user)
  %p
    = submission_link_to(presenter.assignment)

- if presenter.student_logged?(current_user) && presenter.assignment.is_unlocked_for_student?(current_student)
  = render partial: "assignments/self_log_form", locals: { student: current_student, assignment: presenter.assignment }

- if current_user_is_staff? && presenter.assignment.grades.instructor_modified.any?
  %h3.uppercase Downloads
  %p= link_to glyph(:download) + "Download Grades", export_assignment_grades_path(presenter.assignment, format: :csv)

  - if presenter.grade_with_rubric? && presenter.grades.present? && ! presenter.check_student_logged?
    .clear= link_to glyph(:download) + "Download Rubric Grades", export_earned_levels_assignment_grades_path(presenter.assignment, format: :csv)

- if current_student.present?
  - @group = current_student.group_for_assignment(presenter.assignment)
  - if presenter.group_assignment?
    - if @group.present?
      = render partial: "groups/status_display", locals: { group: @group }
      %h3.uppercase Your #{term_for :group} for this #{term_for :assignment}:
      %ul
        - @group.students.each do |student|
          %li= student.name
    - else
      = link_to glyph(:users) + "Create a #{term_for :group}", new_group_path, class: "button"

  - if presenter.assignment.is_unlockable?
    - if presenter.assignment.is_unlocked_for_student?(current_student)
      %h3.uppercase #{glyph(:unlock)} This #{term_for :assignment} has been Unlocked!
      %p.italic To achieve this you:
      %ul
        - presenter.assignment.unlock_conditions.each do |condition|
          %li
            = condition.requirements_completed_sentence(current_user.time_zone)
            - if presenter.assignment.has_groups? && @group.present?
              = "(#{condition.count_unlocked_in_group(@group)}/#{@group.students.count} #{term_for :group} members have completed this requirement)"
      - if presenter.assignment.has_groups? && @group.present?
        - if ! presenter.assignment.is_unlocked_for_group?(@group)
          All #{term_for :group} members must complete the unlock conditions before the #{term_for :group} can proceed
        - else
          Congratulations! Your #{term_for :group} has successfully unlocked this #{term_for :assignment}
      - if presenter.assignment.has_groups? && ! @group.present?
        You must create a #{term_for :group} to complete this #{term_for :assignment}

    - else
      %h3.uppercase #{glyph(:lock)} This #{term_for :assignment} is Locked
      %p.italic You have not unlocked this #{term_for :assignment}. To achieve this you must:
      %ul
        - presenter.assignment.unlock_conditions.each do |uc|
          - if !uc.condition_type == "Learning Objective"
            %li= link_to uc.requirements_description_sentence(current_user.time_zone), uc.condition
          - elsif uc.condition_type == "Assignment"
            - if !uc.check_assignment_condition_visible
              %li= "You have not unlocked this assignment."
          - else
            %li= link_to uc.requirements_description_sentence(current_user.time_zone), learning_objectives_objective_path(uc.condition_id)
- elsif presenter.assignment.is_unlockable?
  %h3.uppercase #{glyph(:lock)} This #{term_for :assignment} is Locked
  %p.italic To unlock it, #{ term_for :students } must:
  %ul
    - presenter.assignment.unlock_conditions.each do |condition|
      - if !condition.unlockable_type == GradeSchemeElement
        %li= link_to condition.requirements_description_sentence(current_user.time_zone), condition.unlockable
      - else
        %li= condition.requirements_description_sentence(current_user.time_zone)

- if presenter.assignment.is_a_condition?
  %h3.uppercase #{glyph(:key)} This #{term_for :assignment} is a Key:
  %ul
    - presenter.assignment.unlock_keys.each do |key|
      - if !key.unlockable_type == GradeSchemeElement
        %li= link_to key.key_description_sentence(current_user.time_zone), key.unlockable
      - else
        %li= key.key_description_sentence(current_user.time_zone)

- if presenter.assignment_has_viewable_description?(current_user)
  - if presenter.assignment.assignment_files.present?
    %h3.uppercase Attachments:
    %ul
      - presenter.assignment.assignment_files.each do |af|
        %li= link_to af.filename, af.url

  %h3.uppercase Guidelines:
  = raw sanitize_external_links presenter.assignment.description

- if presenter.assignment_has_viewable_purpose?(current_user)
  %h3.uppercase Purpose:
  = raw presenter.assignment.purpose

- if presenter.assignment.assignment_type.description.present?
  %h3.uppercase #{ presenter.assignment.assignment_type.name} Guidelines:
  = raw presenter.assignment.assignment_type.description
